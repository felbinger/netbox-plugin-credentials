name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.dbms }}-${{ matrix.auth }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.dbms }}-${{ matrix.auth }}

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --ignore=E501,F401 --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    name: Build Python Package
    if: ${{ github.event_name != 'pull_request' }}
    needs: [ lint ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check Version
        run: |
          if [[ $GITHUB_REF = refs/tags/v* ]]; then
            tag=${GITHUB_REF#refs/tags/v}
            version=$(grep 'version=' setup.py | cut -d \' -f2)
            if [[ "$tag" != "$version" ]]; then
              echo "::error::Tag $tag does not match version $version"
              exit 1
            fi
          fi

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Virtual Environment
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-venv

      - name: Setup build
        run: |
          pip install build

      - name: Build python package
        run: python3 -m build

      - name: Upload dist
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist

  pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [ lint, build ]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - name: Download dist
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist

      - name: Install Twine
        run: pip install twine

      - name: Upload package to PyPi
        run: python -m twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} -r pypi dist/*
